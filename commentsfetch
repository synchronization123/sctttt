import requests

# Configuration
JIRA_URL = "https://jira.demo.almworks.com"
JIRA_TOKEN = "abc"
DOJO_URL = "https://demo.defectdojo.org"
DOJO_TOKEN = "abc"

HEADERS_JIRA = {
    "Authorization": f"Bearer {JIRA_TOKEN}",
    "Accept": "application/json"
}

HEADERS_DOJO = {
    "Authorization": f"Token {DOJO_TOKEN}",
    "Accept": "application/json",
    "Content-Type": "application/json"
}

def get_dojo_tests():
    """Fetch tests from DefectDojo."""
    print("\nFetching tests from DefectDojo...")
    response = requests.get(f"{DOJO_URL}/api/v2/tests/", headers=HEADERS_DOJO)
    
    if response.status_code == 200:
        tests = response.json().get("results", [])
        print(f"✅ Found {len(tests)} tests.")
        return tests
    else:
        print(f"❌ Failed to fetch tests. Status Code: {response.status_code}")
        return []

def get_dojo_user_info(user_id):
    """Fetch username from DefectDojo users API using user ID."""
    print(f"🔍 Fetching DefectDojo user info for ID: {user_id}...")
    response = requests.get(f"{DOJO_URL}/api/v2/users/{user_id}/", headers=HEADERS_DOJO)

    if response.status_code == 200:
        username = response.json().get("username", "").split("@")[0]  # Take only part before @
        print(f"✅ Dojo User: {username}")
        return username
    else:
        print(f"❌ Failed to fetch user info for {user_id}. Status Code: {response.status_code}")
        return None

def get_jira_comments(issue_key):
    """Fetch comments for a Jira issue."""
    print(f"\nFetching comments for Jira issue: {issue_key}...")
    response = requests.get(f"{JIRA_URL}/rest/api/2/issue/{issue_key}/comment", headers=HEADERS_JIRA)
    
    if response.status_code == 200:
        comments = response.json().get("comments", [])
        print(f"✅ Found {len(comments)} comments for issue {issue_key}.")
        return comments
    else:
        print(f"❌ Failed to fetch comments for {issue_key}. Status Code: {response.status_code}")
        return []

def update_dojo_test(test_id, new_description, existing_tags):
    """Update test description and add 'jiracommentfetched' tag."""
    print(f"🔄 Updating test ID {test_id} with new description and tag 'jiracommentfetched'...")
    
    # Add jiracommentfetched to existing tags if not already present
    updated_tags = list(set(existing_tags + ["jiracommentfetched"]))
    update_data = {"description": new_description, "tags": updated_tags}
    
    response = requests.patch(f"{DOJO_URL}/api/v2/tests/{test_id}/", headers=HEADERS_DOJO, json=update_data)
    
    if response.status_code == 200:
        print(f"✅ Successfully updated test {test_id}!")
        return True
    else:
        print(f"❌ Failed to update test {test_id}. Status Code: {response.status_code}")
        return False

def main():
    print("🚀 Starting execution...\n")
    
    tests = get_dojo_tests()  # Fetch all tests
    if not tests:
        print("No tests to process. Exiting.")
        return

    for test in tests:
        test_id = test["id"]
        jira_key = test["title"]  # Title has Issuekey
        version = test["version"]
        branch_tag = test["branch_tag"]
        lead_id = test["lead"]
        existing_tags = test.get("tags", [])

        print("\n------------------------------------")
        print(f"🔍 Processing Test ID: {test_id}")
        print(f"🔹 Jira Issue: {jira_key}")
        print(f"🔹 Version: {version}")
        print(f"🔹 Branch Tag: {branch_tag}")
        print(f"🔹 Lead ID: {lead_id}")
        print(f"🔹 Existing Tags: {existing_tags}")

        # Skip if jiracommentfetched tag is already present
        if "jiracommentfetched" in existing_tags:
            print(f"⏭️ Skipping test {test_id} (Already has 'jiracommentfetched' tag)")
            continue

        # Check if branch_tag is Completed or Rejected
        if branch_tag not in ["Completed", "Rejected"]:
            print(f"❌ Skipping test {test_id} (Branch Tag '{branch_tag}' not in scope)")
            continue

        # Get the assigned DefectDojo username (excluding @domain)
        dojo_username = get_dojo_user_info(lead_id)
        if not dojo_username:
            print(f"⚠️ No valid Dojo username found for lead ID {lead_id}, skipping test {test_id}.")
            continue

        # Get Jira comments for the issue key
        comments = get_jira_comments(jira_key)

        # Filter comments by author and exact version match (case insensitive)
        matching_comments = [
            c["body"] for c in comments
            if c["author"]["name"] == dojo_username and version.lower() in c["body"].lower()
        ]

        if matching_comments:
            latest_comment = matching_comments[-1]  # Take the most recent matching comment
            print(f"✅ Found matching comment with version '{version}': {latest_comment}")
            
            # Update test with comment and add jiracommentfetched tag
            update_success = update_dojo_test(test_id, latest_comment, existing_tags)

            if update_success:
                print(f"✅ Test {test_id} updated successfully with Jira comment containing version '{version}'!")
            else:
                print(f"❌ Failed to update test {test_id}.")
        else:
            print(f"⚠️ No comment found for test {test_id} by {dojo_username} containing version '{version}', skipping update.")

    print("\n✅ Execution completed.")

if __name__ == "__main__":
    main()