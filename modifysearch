<div class="custom-dropdown">
  <div class="dropdown-selected" onclick="toggleDropdown(this)">
    Filter by Jira(s) assigned
  </div>
  <div class="dropdown-content">
    <input type="text" class="search-input" placeholder="Search..." oninput="filterDropdown(this)">
    <select id="jiraAssignedFilterOpen" onchange="renderTableOpen(currentPageOpen)">
      <option value="">Select an option</option>
      <!-- Add your options here -->
      <option value="user1">John Doe</option>
      <option value="user2">Jane Smith</option>
      <option value="user3">Bob Johnson</option>
    </select>
  </div>
</div>

<style>
.custom-dropdown {
  position: relative;
  width: 300px; /* Adjust as needed */
  margin: 20px 0;
  font-family: Arial, sans-serif;
}

.dropdown-selected {
  padding: 12px 15px;
  border: 2px solid #e0e0e0;
  border-radius: 8px;
  background: #fff;
  cursor: pointer;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  transition: all 0.3s ease;
}

.dropdown-selected:hover {
  border-color: #007bff;
}

.dropdown-content {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: #fff;
  border: 2px solid #e0e0e0;
  border-top: none;
  border-radius: 0 0 8px 8px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  z-index: 1000;
  max-height: 250px;
  overflow-y: auto;
}

.dropdown-content.show {
  display: block;
}

.search-input {
  width: calc(100% - 20px);
  margin: 10px;
  padding: 8px;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  font-size: 14px;
  position: sticky;
  top: 0;
  background: #fff;
}

.custom-dropdown select {
  width: 100%;
  border: none;
  padding: 5px 0;
  margin: 0;
  background: transparent;
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

.custom-dropdown option {
  padding: 10px 15px;
  cursor: pointer;
  transition: background 0.2s ease;
}

.custom-dropdown option:hover {
  background: #f0f7ff;
  color: #007bff;
}
</style>

<script>
function toggleDropdown(element) {
  const content = element.nextElementSibling;
  content.classList.toggle('show');
}

function filterDropdown(input) {
  const filter = input.value.toLowerCase();
  const select = input.nextElementSibling;
  const options = select.getElementsByTagName('option');
  
  for (let option of options) {
    const text = option.textContent.toLowerCase();
    if (text.includes(filter)) {
      option.style.display = '';
    } else {
      option.style.display = 'none';
    }
  }
}

// Close dropdown when clicking outside
document.addEventListener('click', (e) => {
  const dropdowns = document.querySelectorAll('.custom-dropdown');
  dropdowns.forEach(dropdown => {
    if (!dropdown.contains(e.target)) {
      dropdown.querySelector('.dropdown-content').classList.remove('show');
    }
  });
});

// Update selected text when option is chosen
document.getElementById('jiraAssignedFilterOpen').addEventListener('change', function(e) {
  const selectedText = this.options[this.selectedIndex].text;
  this.closest('.custom-dropdown').querySelector('.dropdown-selected').textContent = selectedText;
});
</script>