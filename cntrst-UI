<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Contrast Traces Dashboard</title>
    <style>
        /* Same CSS as before */
        :root {
            --bs-blue: #0d6efd;
            --bs-success: #28a745;
            --bs-warning: #ffc107;
            --bs-danger: #dc3545;
            --bs-gray-100: #f8f9fa;
            --bs-gray-200: #e9ecef;
            --bs-dark: #2c3e50;
            --bs-light: #ffffff;
            --highlight-green: #d4edda;
        }
        body {
            background: linear-gradient(135deg, #6e48aa 0%, #9d50bb 100%);
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100vw;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .container {
            background: var(--bs-light);
            padding: 25px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            width: 90vw;
            height: 90vh;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }
        h1, h2 { color: var(--bs-dark); font-weight: 600; }
        .text-center { text-align: center; }
        .mb-4 { margin-bottom: 1.5rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        .d-flex { display: flex; }
        .justify-content-between { justify-content: space-between; }
        .row { display: flex; flex-wrap: wrap; gap: 15px; }
        .col-md-3 { flex: 1; min-width: 150px; }
        .text-end { text-align: end; }
        .form-control, .form-select {
            width: 100%;
            padding: 8px;
            border: none;
            border-radius: 8px;
            background: #f0f4f8;
            font-size: 1rem;
            transition: all 0.3s;
        }
        .form-control:focus, .form-select:focus {
            outline: none;
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
            background: #fff;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s;
            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
        }
        .btn:hover { transform: translateY(-3px); box-shadow: 0 6px 12px rgba(0,0,0,0.15); }
        .btn-primary { background: linear-gradient(45deg, var(--bs-blue), #5a9bff); color: white; }
        .btn-secondary { background: linear-gradient(45deg, #6c757d, #95a5a6); color: white; }
        .btn-success { background: linear-gradient(45deg, var(--bs-success), #5cb85c); color: white; }
        .btn-danger { background: linear-gradient(45deg, var(--bs-danger), #ff6b6b); color: white; }
        .btn-sm { padding: 6px 12px; font-size: 0.875rem; }
        .btn:disabled { background: #cccccc; cursor: not-allowed; box-shadow: none; }
        .alert {
            position: absolute;
            right: 25px;
            top: 150px;
            padding: 8px 15px;
            border-radius: 8px;
            display: none;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 10;
        }
        .alert-success { background: linear-gradient(45deg, #d4edda, #e6f7e9); color: #155724; }
        .alert-danger { background: linear-gradient(45deg, #f8d7da, #fce4e6); color: #721c24; }
        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            z-index: 1000;
            max-width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            text-align: center;
        }
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }
        .large-modal { max-width: 95%; width: 95%; max-height: 85vh; }
        .tab-container { display: flex; border-bottom: 2px solid var(--bs-gray-200); margin-bottom: 20px; }
        .tab { flex: 1; padding: 10px 15px; text-align: center; cursor: pointer; background: var(--bs-gray-100); color: var(--bs-dark); transition: all 0.3s; }
        .tab:hover { background: #e0e0e0; }
        .tab.active { background: var(--bs-blue); color: white; }
        .tab-content { display: none; flex-grow: 1; overflow-y: auto; }
        .tab-content.active { display: block; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; background: #fff; border-radius: 10px; overflow: hidden; }
        th, td { border: 1px solid #e0e0e0; padding: 10px; text-align: center; }
        th { background: linear-gradient(45deg, var(--bs-gray-200), #f1f3f5); color: var(--bs-dark); font-weight: 600; }
        td { background: #fafafa; transition: background 0.2s; }
        tr:hover td { background: #f0f4f8; }
        .form-select { background: #f0f4f8 url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="10" height="5" viewBox="0 0 10 5"><path fill="%232c3e50" d="M0 0h10L5 5z"/></svg>') no-repeat right 8px center; }
        .pagination { display: flex; justify-content: center; gap: 10px; margin-top: 20px; }
        .page-item { padding: 8px 14px; background: var(--bs-gray-100); border-radius: 5px; cursor: pointer; transition: all 0.3s; }
        .page-item:hover, .page-item.active { background: var(--bs-blue); color: white; }
        textarea { width: 100%; padding: 8px; border: none; border-radius: 8px; background: #f0f4f8; resize: vertical; }
        .total-count { font-size: 1.1rem; color: var(--bs-dark); margin-bottom: 10px; font-weight: 500; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center mb-4">Contrast Traces Dashboard</h1>

        <div class="d-flex justify-content-between mb-2">
            <div>
                <button class="btn btn-primary btn-sm" onclick="showReassignmentModal()">Reassignment</button>
                <button class="btn btn-primary btn-sm" onclick="showTrendModal()">Trend</button>
            </div>
            <button class="btn btn-primary btn-sm" onclick="fetchEngagements()">ðŸ”„ Refresh</button>
            <span class="csrf-label" style="color: #ffffff;">CSRF Token: <strong id="csrfToken">Fetching...</strong></span>
        </div>

        <div class="total-count" id="totalCount">Total Traces: 0</div>

        <div class="tab-container">
            <div class="tab active" onclick="switchTab('open')">Open Traces</div>
            <div class="tab" onclick="switchTab('closed')">Closed Traces</div>
        </div>

        <div id="open-tab" class="tab-content active">
            <div class="row mb-2">
                <div class="col-md-3">
                    <select id="assignedToFilterOpen" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Assigned To</option>
                    </select>
                    <button class="btn btn-secondary btn-sm mt-2" onclick="showSummaryModal('open')">View Summary</button>
                    <button class="btn btn-secondary btn-sm mt-2" onclick="showCompletedModal('open')">Completed</button>
                </div>
                <div class="col-md-3">
                    <select id="severityFilterOpen" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Severity</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="ruleFilterOpen" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Rule</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="productFilterOpen" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Product</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <input type="text" id="nameSearchOpen" class="form-control" placeholder="Search by name..." oninput="fetchEngagements()">
                </div>
                <div class="col-md-3 text-end">
                    <button class="btn btn-secondary btn-sm" onclick="clearFilters('open')">â†º Clear Filters</button>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Created</th>
                        <th>Aging (Days)</th>
                        <th>Name</th>
                        <th>Severity</th>
                        <th>Rule</th>
                        <th>Product</th>
                        <th>Comments</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="openTracesTable"></tbody>
            </table>

            <div class="pagination" id="openPagination"></div>
        </div>

        <div id="closed-tab" class="tab-content">
            <div class="row mb-2">
                <div class="col-md-3">
                    <select id="assignedToFilterClosed" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Assigned To</option>
                    </select>
                    <button class="btn btn-secondary btn-sm mt-2" onclick="showSummaryModal('closed')">View Summary</button>
                    <button class="btn btn-secondary btn-sm mt-2" onclick="showCompletedModal('closed')">Completed</button>
                </div>
                <div class="col-md-3">
                    <select id="severityFilterClosed" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Severity</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="ruleFilterClosed" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Rule</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="productFilterClosed" class="form-select" onchange="fetchEngagements()">
                        <option value="">Filter by Product</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <input type="text" id="nameSearchClosed" class="form-control" placeholder="Search by name..." oninput="fetchEngagements()">
                </div>
                <div class="col-md-3 text-end">
                    <button class="btn btn-secondary btn-sm" onclick="clearFilters('closed')">â†º Clear Filters</button>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Created</th>
                        <th>Aging (Days)</th>
                        <th>Name</th>
                        <th>Severity</th>
                        <th>Rule</th>
                        <th>Product</th>
                        <th>Comments</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="closedTracesTable"></tbody>
            </table>

            <div class="pagination" id="closedPagination"></div>
        </div>

        <div id="alertBox" class="alert"></div>
        <div id="modalOverlay" class="modal-overlay"></div>

        <!-- Reassignment Modal -->
        <div id="reassignmentModal" class="modal large-modal">
            <h2>Reassignment</h2>
            <table id="reassignmentTable">
                <thead>
                    <tr>
                        <th><input type="checkbox" id="selectAll" onclick="toggleSelectAll()"></th>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Severity</th>
                        <th>Rule</th>
                        <th>Product</th>
                        <th>Assigned To</th>
                    </tr>
                </thead>
                <tbody id="reassignmentTableBody"></tbody>
            </table>
            <div class="pagination" id="reassignmentPagination"></div>
            <div id="reassignButtonContainer" style="display: none;" class="mt-2">
                <button class="btn btn-primary" onclick="showReassignConfirmModal()">Reassign</button>
            </div>
            <button class="btn btn-secondary mt-2" onclick="closeReassignmentModal()">Close</button>
        </div>

        <!-- Reassign Confirmation Modal -->
        <div id="reassignConfirmModal" class="modal">
            <h2>Reassign Selected Traces</h2>
            <div class="mb-2">
                <select id="reassignToUser" class="form-select">
                    <option value="">Select User to Reassign To</option>
                </select>
            </div>
            <div class="mb-2">
                <label>Or Divide Among Multiple Users:</label>
                <input type="number" id="divideAmongUsers" class="form-control" min="1" placeholder="Number of users" onchange="showUserCheckboxes()">
            </div>
            <div id="userCheckboxContainer" class="mb-2" style="display: none; max-height: 200px; overflow-y: auto;">
                <h3>Select Users</h3>
                <div id="userCheckboxes"></div>
            </div>
            <div class="d-flex justify-content-between">
                <button class="btn btn-primary" onclick="confirmReassignment()">Confirm</button>
                <button class="btn btn-secondary" onclick="closeReassignConfirmModal()">Cancel</button>
            </div>
        </div>

        <!-- Summary Modal -->
        <div id="summaryModal" class="modal large-modal">
            <h2>Summary</h2>
            <div id="summaryContent"></div>
            <button class="btn btn-secondary mt-2" onclick="closeSummaryModal()">Close</button>
        </div>

        <!-- Completed Modal -->
        <div id="completedModal" class="modal large-modal">
            <h2>Completed Traces</h2>
            <div class="row mb-2">
                <div class="col-md-3">
                    <input type="date" id="completedDate1" class="form-control" onchange="renderCompletedTable()">
                </div>
                <div class="col-md-3">
                    <input type="date" id="completedDate2" class="form-control" onchange="renderCompletedTable()">
                </div>
            </div>
            <table id="completedTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Assigned To</th>
                        <th>Severity</th>
                        <th>Rule</th>
                        <th>Product</th>
                    </tr>
                </thead>
                <tbody id="completedTableBody"></tbody>
            </table>
            <button class="btn btn-secondary mt-2" onclick="closeCompletedModal()">Close</button>
        </div>

        <!-- Trend Modal -->
        <div id="trendModal" class="modal large-modal">
            <h2>Trend Analysis</h2>
            <div class="row mb-2">
                <div class="col-md-3">
                    <select id="trendProductFilter" class="form-select" onchange="renderTrendTable()">
                        <option value="">Filter by Product</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="trendRuleFilter" class="form-select" onchange="renderTrendTable()">
                        <option value="">Filter by Rule</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="trendSeverityFilter" class="form-select" onchange="renderTrendTable()">
                        <option value="">Filter by Severity</option>
                    </select>
                </div>
            </div>
            <table id="trendTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Total Traces Received</th>
                        <th>Traces Completed</th>
                    </tr>
                </thead>
                <tbody id="trendTableBody"></tbody>
            </table>
            <div class="pagination" id="trendPagination"></div>
            <button class="btn btn-secondary mt-2" onclick="closeTrendModal()">Close</button>
        </div>
    </div>

    <script>
        const BASE_URL = "https://demo.defectdojo.org/api/v2";
        let csrfToken = '';
        let usersList = [];
        let productsList = [];
        let debounceTimeout;
        const ROWS_PER_PAGE = 5;
        let currentPageOpen = 1;
        let currentPageClosed = 1;
        let currentPageTrend = 1;
        let openTraces = [];
        let closedTraces = [];
        let allTraces = [];
        let reassignmentTraces = [];

        async function fetchCSRF() {
            try {
                const response = await fetch("https://demo.defectdojo.org/api/key-v2", { credentials: "include" });
                const text = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(text, "text/html");
                const csrfInput = doc.querySelector("input[name='csrfmiddlewaretoken']");
                if (csrfInput) {
                    csrfToken = csrfInput.value;
                    document.getElementById("csrfToken").innerText = csrfToken;
                }
            } catch (error) {
                console.error("Error fetching CSRF Token:", error);
            }
        }

        async function fetchUsers() {
            try {
                const response = await fetch(`${BASE_URL}/users/`);
                const data = await response.json();
                usersList = data.results || [];
            } catch (error) {
                console.error("Error fetching users:", error);
            }
        }

        async function fetchProducts() {
            try {
                const response = await fetch(`${BASE_URL}/products/?limit=1000000`);
                const data = await response.json();
                productsList = data.results || [];
                populateFilters();
            } catch (error) {
                console.error("Error fetching products:", error);
            }
        }

        function showAlert(message, type) {
            const alertBox = document.getElementById("alertBox");
            alertBox.className = `alert alert-${type}`;
            alertBox.innerHTML = message;
            alertBox.style.display = "block";
            setTimeout(() => { alertBox.style.display = "none"; }, 3000);
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));
            document.querySelector(`.tab[onclick="switchTab('${tab}')"]`).classList.add('active');
            document.getElementById(`${tab}-tab`).classList.add('active');
            if (tab === 'open') renderTableOpen(currentPageOpen);
            else renderTableClosed(currentPageClosed);
            updateTotalCount();
        }

        function updateTotalCount() {
            const activeTab = document.querySelector('.tab.active').textContent.trim();
            const count = activeTab === 'Open Traces' ? openTraces.length : closedTraces.length;
            document.getElementById("totalCount").textContent = `Total Traces: ${count}`;
        }

        function populateFilters() {
            const assignedToOpen = document.getElementById("assignedToFilterOpen");
            const assignedToClosed = document.getElementById("assignedToFilterClosed");
            const severityOpen = document.getElementById("severityFilterOpen");
            const severityClosed = document.getElementById("severityFilterClosed");
            const ruleOpen = document.getElementById("ruleFilterOpen");
            const ruleClosed = document.getElementById("ruleFilterClosed");
            const productOpen = document.getElementById("productFilterOpen");
            const productClosed = document.getElementById("productFilterClosed");
            const trendProduct = document.getElementById("trendProductFilter");
            const trendRule = document.getElementById("trendRuleFilter");
            const trendSeverity = document.getElementById("trendSeverityFilter");

            const uniqueLeads = [...new Set(allTraces.map(t => t.lead))].map(id => {
                const user = usersList.find(u => u.id == id);
                return { id, name: user ? `${user.first_name} ${user.last_name}` : 'Unassigned' };
            });
            const uniqueSeverities = [...new Set(allTraces.map(t => t.branch_tag || 'N/A'))].sort();
            const uniqueRules = [...new Set(allTraces.map(t => t.commit_hash || 'N/A'))].sort();
            const uniqueProducts = [...new Set(allTraces.map(t => t.product))].map(id => {
                const product = productsList.find(p => p.id === id);
                return { id, name: product ? product.name : 'Unknown' };
            });

            [assignedToOpen, assignedToClosed].forEach(filter => {
                filter.innerHTML = '<option value="">Filter by Assigned To</option>' + 
                    uniqueLeads.map(l => `<option value="${l.id}">${l.name}</option>`).join('');
            });
            [severityOpen, severityClosed, trendSeverity].forEach(filter => {
                filter.innerHTML = '<option value="">Filter by Severity</option>' + 
                    uniqueSeverities.map(s => `<option value="${s}">${s}</option>`).join('');
            });
            [ruleOpen, ruleClosed, trendRule].forEach(filter => {
                filter.innerHTML = '<option value="">Filter by Rule</option>' + 
                    uniqueRules.map(r => `<option value="${r}">${r}</option>`).join('');
            });
            [productOpen, productClosed, trendProduct].forEach(filter => {
                filter.innerHTML = '<option value="">Filter by Product</option>' + 
                    uniqueProducts.map(p => `<option value="${p.id}">${p.name}</option>`).join('');
            });
        }

        function clearFilters(tab) {
            if (tab === 'open') {
                document.getElementById("assignedToFilterOpen").value = "";
                document.getElementById("severityFilterOpen").value = "";
                document.getElementById("ruleFilterOpen").value = "";
                document.getElementById("productFilterOpen").value = "";
                document.getElementById("nameSearchOpen").value = "";
            } else {
                document.getElementById("assignedToFilterClosed").value = "";
                document.getElementById("severityFilterClosed").value = "";
                document.getElementById("ruleFilterClosed").value = "";
                document.getElementById("productFilterClosed").value = "";
                document.getElementById("nameSearchClosed").value = "";
            }
            fetchEngagements();
        }

        async function fetchEngagements() {
            try {
                if (debounceTimeout) clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(async () => {
                    const response = await fetch(`${BASE_URL}/engagements/?tags=contrast&limit=1000000`);
                    const data = await response.json();
                    allTraces = data.results || [];

                    const assignedToOpen = document.getElementById("assignedToFilterOpen").value;
                    const severityOpen = document.getElementById("severityFilterOpen").value;
                    const ruleOpen = document.getElementById("ruleFilterOpen").value;
                    const productOpen = document.getElementById("productFilterOpen").value;
                    const nameSearchOpen = document.getElementById("nameSearchOpen").value.toLowerCase().trim();

                    const assignedToClosed = document.getElementById("assignedToFilterClosed").value;
                    const severityClosed = document.getElementById("severityFilterClosed").value;
                    const ruleClosed = document.getElementById("ruleFilterClosed").value;
                    const productClosed = document.getElementById("productFilterClosed").value;
                    const nameSearchClosed = document.getElementById("nameSearchClosed").value.toLowerCase().trim();

                    openTraces = allTraces.filter(t => t.active).filter(t => {
                        const name = t.name.toLowerCase();
                        return (!assignedToOpen || t.lead == assignedToOpen) &&
                               (!severityOpen || t.branch_tag === severityOpen) &&
                               (!ruleOpen || t.commit_hash === ruleOpen) &&
                               (!productOpen || t.product == productOpen) &&
                               (!nameSearchOpen || name.includes(nameSearchOpen));
                    });

                    closedTraces = allTraces.filter(t => !t.active).filter(t => {
                        const name = t.name.toLowerCase();
                        return (!assignedToClosed || t.lead == assignedToClosed) &&
                               (!severityClosed || t.branch_tag === severityClosed) &&
                               (!ruleClosed || t.commit_hash === ruleClosed) &&
                               (!productClosed || t.product == productClosed) &&
                               (!nameSearchClosed || name.includes(nameSearchClosed));
                    });

                    currentPageOpen = 1;
                    currentPageClosed = 1;
                    renderTableOpen(currentPageOpen);
                    renderTableClosed(currentPageClosed);
                    updateTotalCount();
                    populateFilters();
                }, 300);
            } catch (error) {
                console.error("Error fetching traces:", error);
                showAlert("Error fetching traces!", "danger");
            }
        }

        function calculateAgingOpen(created) {
            const today = new Date();
            const createdDate = new Date(created.split("T")[0]);
            const diffTime = today - createdDate;
            return Math.floor(diffTime / (1000 * 60 * 60 * 24));
        }

        function calculateAgingClosed(created, updated) {
            const createdDate = new Date(created.split("T")[0]);
            const updatedDate = updated ? new Date(updated.split("T")[0]) : createdDate;
            const diffTime = updatedDate - createdDate;
            return Math.floor(diffTime / (1000 * 60 * 60 * 24));
        }

        function getProductName(productId) {
            const product = productsList.find(p => p.id === productId);
            return product ? product.name : 'Unknown';
        }

        function renderTableOpen(page) {
            const tableBody = document.getElementById("openTracesTable");
            tableBody.innerHTML = "";
            const start = (page - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedTraces = openTraces.slice(start, end);

            paginatedTraces.forEach(t => {
                const row = document.createElement("tr");
                row.dataset.id = t.id;
                row.innerHTML = `
                    <td>${t.id}</td>
                    <td>${t.created.split("T")[0]}</td>
                    <td>${calculateAgingOpen(t.created)}</td>
                    <td>${t.name}</td>
                    <td>${t.branch_tag || 'N/A'}</td>
                    <td>${t.commit_hash || 'N/A'}</td>
                    <td>${getProductName(t.product)}</td>
                    <td><textarea class="description" data-id="${t.id}">${t.description || ''}</textarea></td>
                    <td>${createStatusDropdown(t.status)}</td>
                    <td><button class="btn btn-danger btn-sm" onclick="closeTrace(${t.id}, '${t.name}')">Close</button></td>
                `;
                tableBody.appendChild(row);

                const description = row.querySelector(".description");
                const status = row.querySelector("select");
                [description, status].forEach(el => {
                    el.addEventListener("change", () => updateTrace(t.id, t.name));
                    el.addEventListener("blur", () => showAlert("Saved", "success"));
                });
            });
            renderPagination('open');
        }

        function renderTableClosed(page) {
            const tableBody = document.getElementById("closedTracesTable");
            tableBody.innerHTML = "";
            const start = (page - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedTraces = closedTraces.slice(start, end);

            paginatedTraces.forEach(t => {
                const row = document.createElement("tr");
                row.dataset.id = t.id;
                row.innerHTML = `
                    <td>${t.id}</td>
                    <td>${t.created.split("T")[0]}</td>
                    <td>${calculateAgingClosed(t.created, t.updated)}</td>
                    <td>${t.name}</td>
                    <td>${t.branch_tag || 'N/A'}</td>
                    <td>${t.commit_hash || 'N/A'}</td>
                    <td>${getProductName(t.product)}</td>
                    <td>${t.description || ''}</td>
                    <td>${t.status}</td>
                    <td><button class="btn btn-success btn-sm" onclick="reopenTrace(${t.id}, '${t.name}')">Reopen</button></td>
                `;
                tableBody.appendChild(row);
            });
            renderPagination('closed');
        }

        function renderPagination(tab) {
            const totalPages = Math.ceil((tab === 'open' ? openTraces : tab === 'closed' ? closedTraces : trendData).length / ROWS_PER_PAGE);
            const pagination = document.getElementById(tab === 'open' ? 'openPagination' : tab === 'closed' ? 'closedPagination' : 'trendPagination');
            pagination.innerHTML = "";

            const firstItem = document.createElement("div");
            firstItem.className = `page-item ${(tab === 'open' ? currentPageOpen : tab === 'closed' ? currentPageClosed : currentPageTrend) === 1 ? 'active' : ''}`;
            firstItem.textContent = "First";
            firstItem.onclick = () => { 
                if (tab === 'open') { currentPageOpen = 1; renderTableOpen(1); } 
                else if (tab === 'closed') { currentPageClosed = 1; renderTableClosed(1); } 
                else { currentPageTrend = 1; renderTrendTable(); }
            };
            pagination.appendChild(firstItem);

            const prevItem = document.createElement("div");
            prevItem.className = "page-item";
            prevItem.textContent = "Previous";
            prevItem.onclick = () => { 
                if (tab === 'open' && currentPageOpen > 1) { currentPageOpen--; renderTableOpen(currentPageOpen); } 
                else if (tab === 'closed' && currentPageClosed > 1) { currentPageClosed--; renderTableClosed(currentPageClosed); } 
                else if (tab === 'trend' && currentPageTrend > 1) { currentPageTrend--; renderTrendTable(); }
            };
            pagination.appendChild(prevItem);

            const nextItem = document.createElement("div");
            nextItem.className = "page-item";
            nextItem.textContent = "Next";
            nextItem.onclick = () => { 
                if (tab === 'open' && currentPageOpen < totalPages) { currentPageOpen++; renderTableOpen(currentPageOpen); } 
                else if (tab === 'closed' && currentPageClosed < totalPages) { currentPageClosed++; renderTableClosed(currentPageClosed); } 
                else if (tab === 'trend' && currentPageTrend < totalPages) { currentPageTrend++; renderTrendTable(); }
            };
            pagination.appendChild(nextItem);

            const lastItem = document.createElement("div");
            lastItem.className = `page-item ${(tab === 'open' ? currentPageOpen : tab === 'closed' ? currentPageClosed : currentPageTrend) === totalPages ? 'active' : ''}`;
            lastItem.textContent = "Last";
            lastItem.onclick = () => { 
                if (tab === 'open') { currentPageOpen = totalPages; renderTableOpen(totalPages); } 
                else if (tab === 'closed') { currentPageClosed = totalPages; renderTableClosed(totalPages); } 
                else { currentPageTrend = totalPages; renderTrendTable(); }
            };
            pagination.appendChild(lastItem);
        }

        function createStatusDropdown(selectedValue) {
            const options = ["Not Started", "In Progress", "On Hold", "Completed"];
            return `<select class="form-select">${options.map(o => `<option value="${o}" ${o === selectedValue ? "selected" : ""}>${o}</option>`).join('')}</select>`;
        }

        async function updateTrace(id, name) {
            const row = document.querySelector(`#openTracesTable tr[data-id="${id}"]`);
            if (!row) return;
            const description = row.querySelector(".description").value;
            const status = row.querySelector("select").value;

            const payload = {
                id, name, description, status, branch_tag: allTraces.find(t => t.id === id).branch_tag,
                commit_hash: allTraces.find(t => t.id === id).commit_hash, lead: allTraces.find(t => t.id === id).lead,
                active: true, product: allTraces.find(t => t.id === id).product,
                target_start: allTraces.find(t => t.id === id).target_start,
                target_end: allTraces.find(t => t.id === id).target_end
            };

            try {
                const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(payload),
                    credentials: "include"
                });
                if (!response.ok) showAlert("Failed to update trace!", "danger");
                fetchEngagements();
            } catch (error) {
                console.error("Error updating trace:", error);
                showAlert("Error updating trace!", "danger");
            }
        }

        async function closeTrace(id, name) {
            try {
                const payload = { id, name, active: false, status: "Completed" };
                const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(payload),
                    credentials: "include"
                });
                if (response.ok) {
                    showAlert(`${name} closed successfully`, "success");
                    fetchEngagements();
                } else {
                    showAlert("Failed to close trace!", "danger");
                }
            } catch (error) {
                console.error("Error closing trace:", error);
                showAlert("Error closing trace!", "danger");
            }
        }

        async function reopenTrace(id, name) {
            try {
                const payload = { id, name, active: true, status: "Not Started" };
                const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(payload),
                    credentials: "include"
                });
                if (response.ok) {
                    showAlert(`${name} reopened successfully`, "success");
                    fetchEngagements();
                } else {
                    showAlert("Failed to reopen trace!", "danger");
                }
            } catch (error) {
                console.error("Error reopening trace:", error);
                showAlert("Error reopening trace!", "danger");
            }
        }

        async function showReassignmentModal() {
            reassignmentTraces = openTraces;
            renderReassignmentTable(1);
            const modal = document.getElementById("reassignmentModal");
            const overlay = document.getElementById("modalOverlay");
            modal.style.display = "block";
            overlay.style.display = "block";
        }

        function renderReassignmentTable(page) {
            const tableBody = document.getElementById("reassignmentTableBody");
            tableBody.innerHTML = "";
            const start = (page - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedTraces = reassignmentTraces.slice(start, end);

            paginatedTraces.forEach(t => {
                const user = usersList.find(u => u.id == t.lead);
                const row = document.createElement("tr");
                row.dataset.id = t.id;
                row.innerHTML = `
                    <td><input type="checkbox" class="rowCheckbox" onchange="updateReassignButton()"></td>
                    <td>${t.id}</td>
                    <td>${t.name}</td>
                    <td>${t.branch_tag || 'N/A'}</td>
                    <td>${t.commit_hash || 'N/A'}</td>
                    <td>${getProductName(t.product)}</td>
                    <td>${user ? `${user.first_name} ${user.last_name}` : 'Unassigned'}</td>
                `;
                tableBody.appendChild(row);
            });

            const pagination = document.getElementById("reassignmentPagination");
            pagination.innerHTML = "";
            const totalPages = Math.ceil(reassignmentTraces.length / ROWS_PER_PAGE);
            ["First", "Previous", "Next", "Last"].forEach((text, i) => {
                const item = document.createElement("div");
                item.className = `page-item ${i === 0 && page === 1 || i === 3 && page === totalPages ? 'active' : ''}`;
                item.textContent = text;
                item.onclick = () => {
                    if (text === "First") renderReassignmentTable(1);
                    else if (text === "Previous" && page > 1) renderReassignmentTable(page - 1);
                    else if (text === "Next" && page < totalPages) renderReassignmentTable(page + 1);
                    else if (text === "Last") renderReassignmentTable(totalPages);
                };
                pagination.appendChild(item);
            });
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById("selectAll");
            document.querySelectorAll(".rowCheckbox").forEach(cb => cb.checked = selectAll.checked);
            updateReassignButton();
        }

        function updateReassignButton() {
            const checkedCount = document.querySelectorAll(".rowCheckbox:checked").length;
            document.getElementById("reassignButtonContainer").style.display = checkedCount > 0 ? "block" : "none";
        }

        function showReassignConfirmModal() {
            const modal = document.getElementById("reassignConfirmModal");
            const reassignToUser = document.getElementById("reassignToUser");
            reassignToUser.innerHTML = '<option value="">Select User to Reassign To</option>' + 
                usersList.map(u => `<option value="${u.id}">${u.first_name} ${u.last_name}</option>`).join('');
            document.getElementById("divideAmongUsers").value = '';
            document.getElementById("userCheckboxContainer").style.display = "none";
            modal.style.display = "block";
        }

        function showUserCheckboxes() {
            const divideAmongUsers = parseInt(document.getElementById("divideAmongUsers").value) || 0;
            const container = document.getElementById("userCheckboxContainer");
            const checkboxes = document.getElementById("userCheckboxes");
            if (divideAmongUsers > 0) {
                checkboxes.innerHTML = usersList.map(u => `
                    <div>
                        <input type="checkbox" id="user_${u.id}" value="${u.id}">
                        <label for="user_${u.id}">${u.first_name} ${u.last_name}</label>
                    </div>
                `).join('');
                container.style.display = "block";
            } else {
                container.style.display = "none";
            }
        }

        async function confirmReassignment() {
            const selectedUserId = document.getElementById("reassignToUser").value;
            const divideAmongUsers = parseInt(document.getElementById("divideAmongUsers").value) || 0;
            const selectedTraces = Array.from(document.querySelectorAll(".rowCheckbox:checked")).map(cb => 
                reassignmentTraces.find(t => t.id == cb.closest('tr').dataset.id)
            );

            if (!selectedUserId && divideAmongUsers <= 0) {
                showAlert("Please select a user or specify number of users!", "danger");
                return;
            }

            try {
                if (divideAmongUsers > 0) {
                    const selectedUserIds = Array.from(document.querySelectorAll("#userCheckboxes input:checked")).map(cb => cb.value);
                    if (selectedUserIds.length !== divideAmongUsers) {
                        showAlert(`Please select exactly ${divideAmongUsers} users!`, "danger");
                        return;
                    }
                    const testsPerUser = Math.floor(selectedTraces.length / divideAmongUsers);
                    const extraTests = selectedTraces.length % divideAmongUsers;
                    let testIndex = 0;
                    for (let i = 0; i < divideAmongUsers; i++) {
                        const userTests = selectedTraces.slice(testIndex, testIndex + testsPerUser + (i < extraTests ? 1 : 0));
                        const userId = selectedUserIds[i];
                        for (const test of userTests) {
                            await reassignTrace(test.id, userId);
                        }
                        testIndex += testsPerUser + (i < extraTests ? 1 : 0);
                    }
                } else {
                    for (const test of selectedTraces) {
                        await reassignTrace(test.id, selectedUserId);
                    }
                }
                showAlert(`${selectedTraces.length} trace(s) reassigned!`, "success");
                closeReassignConfirmModal();
                closeReassignmentModal();
                fetchEngagements();
            } catch (error) {
                console.error("Error reassigning traces:", error);
                showAlert("Error reassigning traces!", "danger");
            }
        }

        async function reassignTrace(id, userId) {
            const trace = allTraces.find(t => t.id === id);
            const payload = { ...trace, lead: userId };
            const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
                method: "PUT",
                headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                body: JSON.stringify(payload),
                credentials: "include"
            });
            if (!response.ok) throw new Error("Failed to reassign trace");
        }

        function closeReassignmentModal() {
            document.getElementById("reassignmentModal").style.display = "none";
            document.getElementById("modalOverlay").style.display = "none";
        }

        function closeReassignConfirmModal() {
            document.getElementById("reassignConfirmModal").style.display = "none";
        }

        function showSummaryModal(tab) {
            const traces = tab === 'open' ? openTraces : closedTraces;
            const byRule = {};
            const bySeverity = {};
            const byProduct = {};

            traces.forEach(t => {
                byRule[t.commit_hash || 'N/A'] = (byRule[t.commit_hash || 'N/A'] || 0) + 1;
                bySeverity[t.branch_tag || 'N/A'] = (bySeverity[t.branch_tag || 'N/A'] || 0) + 1;
                byProduct[getProductName(t.product)] = (byProduct[getProductName(t.product)] || 0) + 1;
            });

            const content = `
                <h3>By Rule</h3>
                <ul>${Object.entries(byRule).map(([rule, count]) => `<li>${rule}: ${count}</li>`).join('')}</ul>
                <h3>By Severity</h3>
                <ul>${Object.entries(bySeverity).map(([severity, count]) => `<li>${severity}: ${count}</li>`).join('')}</ul>
                <h3>By Product</h3>
                <ul>${Object.entries(byProduct).map(([product, count]) => `<li>${product}: ${count}</li>`).join('')}</ul>
                <p>Total: ${traces.length}</p>
            `;
            document.getElementById("summaryContent").innerHTML = content;
            document.getElementById("summaryModal").style.display = "block";
            document.getElementById("modalOverlay").style.display = "block";
        }

        function closeSummaryModal() {
            document.getElementById("summaryModal").style.display = "none";
            document.getElementById("modalOverlay").style.display = "none";
        }

        function showCompletedModal(tab) {
            document.getElementById("completedDate1").value = "";
            document.getElementById("completedDate2").value = "";
            renderCompletedTable(tab);
            document.getElementById("completedModal").style.display = "block";
            document.getElementById("modalOverlay").style.display = "block";
        }

        function renderCompletedTable(tab) {
            const traces = (tab === 'open' ? openTraces : closedTraces).filter(t => t.status === "Completed");
            const date1 = document.getElementById("completedDate1").value;
            const date2 = document.getElementById("completedDate2").value;
            let filteredTraces = traces;

            if (date1 || date2) {
                const start = date1 ? new Date(date1).setHours(0, 0, 0, 0) : null;
                const end = date2 ? new Date(date2).setHours(23, 59, 59, 999) : null;
                filteredTraces = traces.filter(t => {
                    const updated = new Date(t.updated || t.created).getTime();
                    return (!start || updated >= start) && (!end || updated <= end);
                });
            }

            const tableBody = document.getElementById("completedTableBody");
            tableBody.innerHTML = "";
            filteredTraces.forEach(t => {
                const user = usersList.find(u => u.id == t.lead);
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${t.id}</td>
                    <td>${t.name}</td>
                    <td>${user ? `${user.first_name} ${user.last_name}` : 'Unassigned'}</td>
                    <td>${t.branch_tag || 'N/A'}</td>
                    <td>${t.commit_hash || 'N/A'}</td>
                    <td>${getProductName(t.product)}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        function closeCompletedModal() {
            document.getElementById("completedModal").style.display = "none";
            document.getElementById("modalOverlay").style.display = "none";
        }

        let trendData = [];
        function showTrendModal() {
            renderTrendTable();
            document.getElementById("trendModal").style.display = "block";
            document.getElementById("modalOverlay").style.display = "block";
        }

        function renderTrendTable() {
            const productFilter = document.getElementById("trendProductFilter").value;
            const ruleFilter = document.getElementById("trendRuleFilter").value;
            const severityFilter = document.getElementById("trendSeverityFilter").value;

            let filteredTraces = allTraces.filter(t => 
                (!productFilter || t.product == productFilter) &&
                (!ruleFilter || t.commit_hash === ruleFilter) &&
                (!severityFilter || t.branch_tag === severityFilter)
            );

            const tracesByDate = {};
            filteredTraces.forEach(t => {
                const date = t.created.split("T")[0];
                if (!tracesByDate[date]) {
                    tracesByDate[date] = { received: 0, completed: 0 };
                }
                tracesByDate[date].received++;
                if (t.status === "Completed") tracesByDate[date].completed++;
            });

            trendData = Object.entries(tracesByDate).map(([date, stats]) => ({
                date, received: stats.received, completed: stats.completed
            })).sort((a, b) => new Date(b.date) - new Date(a.date));

            const tableBody = document.getElementById("trendTableBody");
            tableBody.innerHTML = "";
            const start = (currentPageTrend - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedData = trendData.slice(start, end);

            paginatedData.forEach(d => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${d.date}</td>
                    <td>${d.received}</td>
                    <td>${d.completed}</td>
                `;
                tableBody.appendChild(row);
            });

            renderPagination('trend');
        }

        function closeTrendModal() {
            document.getElementById("trendModal").style.display = "none";
            document.getElementById("modalOverlay").style.display = "none";
        }

        document.addEventListener("DOMContentLoaded", async () => {
            await fetchCSRF();
            await fetchUsers();
            await fetchProducts();
            await fetchEngagements();
        });
    </script>
</body>
</html>