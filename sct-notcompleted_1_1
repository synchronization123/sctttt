<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DefectDojo Engagements</title>
    <style>
        /* Enhanced Bootstrap-inspired CSS */
        :root {
            --bs-blue: #0d6efd;
            --bs-success: #28a745;
            --bs-warning: #ffc107;
            --bs-danger: #dc3545;
            --bs-gray-100: #f8f9fa;
            --bs-gray-200: #e9ecef;
            --bs-dark: #2c3e50;
            --bs-light: #ffffff;
            --highlight-green: #d4edda; /* Light green for highlight */
        }
        body {
            background: linear-gradient(135deg, #6e48aa 0%, #9d50bb 100%);
            margin: 0;
            padding: 0;
            height: 100vh;
            width: 100vw;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .container {
            background: var(--bs-light);
            padding: 25px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            width: 90vw;
            height: 90vh;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            border: 1px solid rgba(255,255,255,0.1);
            position: relative;
        }
        h1 {
            color: var(--bs-dark);
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            font-weight: 600;
        }
        .text-center { text-align: center; }
        .mb-4 { margin-bottom: 1.5rem; }
        .mb-2 { margin-bottom: 0.5rem; }
        .d-flex { display: flex; }
        .justify-content-between { justify-content: space-between; }
        .row { display: flex; flex-wrap: wrap; gap: 15px; }
        .col-md-3, .col-md-2 { flex: 1; min-width: 150px; }
        .text-end { text-align: end; }
        .w-100 { width: 100%; }

        .form-control, .form-select, .version-input {
            width: 100%;
            padding: 8px;
            border: none;
            border-radius: 8px;
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.05);
            background: #f0f4f8;
            font-size: 1rem;
            transition: all 0.3s;
            box-sizing: border-box;
        }
        .form-control:focus, .form-select:focus {
            outline: none;
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.5);
            background: #fff;
        }
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s;
            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
            position: relative;
        }
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        .btn-primary {
            background: linear-gradient(45deg, var(--bs-blue), #5a9bff);
            color: white;
        }
        .btn-secondary {
            background: linear-gradient(45deg, #6c757d, #95a5a6);
            color: white;
        }
        .btn-sm {
            padding: 6px 12px;
            font-size: 0.875rem;
        }
        .btn-refresh, .btn-clear {
            padding: 6px 12px; /* Match btn-sm size */
            font-size: 0.875rem;
        }
        .btn:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            top: -30px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            white-space: nowrap;
        }
        .alert {
            position: absolute;
            right: 25px;
            top: 150px;
            padding: 8px 15px;
            border-radius: 8px;
            display: none;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 10;
            max-width: 200px;
            font-size: 0.9rem;
        }
        .alert-success {
            background: linear-gradient(45deg, #d4edda, #e6f7e9);
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .alert-danger {
            background: linear-gradient(45deg, #f8d7da, #fce4e6);
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        /* Tab Styles */
        .tab-container {
            display: flex;
            border-bottom: 2px solid var(--bs-gray-200);
            margin-bottom: 20px;
        }
        .tab {
            flex: 1;
            padding: 10px 15px;
            text-align: center;
            cursor: pointer;
            background: var(--bs-gray-100);
            color: var(--bs-dark);
            font-weight: 500;
            transition: all 0.3s;
        }
        .tab:hover {
            background: #e0e0e0;
        }
        .tab.active {
            background: var(--bs-blue);
            color: white;
        }
        .tab-content {
            display: none;
            flex-grow: 1;
            overflow-y: auto;
        }
        .tab-content.active {
            display: block;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: #fff;
            border-radius: 10px;
            overflow: hidden;
        }
        th, td {
            border: 1px solid #e0e0e0;
            padding: 10px;
            text-align: center;
            vertical-align: middle;
            white-space: nowrap;
        }
        th {
            background: linear-gradient(45deg, var(--bs-gray-200), #f1f3f5);
            color: var(--bs-dark);
            font-weight: 600;
            white-space: normal;
            word-wrap: break-word;
        }
        td {
            background: #fafafa;
            transition: background 0.2s;
        }
        tr:hover td {
            background: #f0f4f8;
        }
        .highlight-name {
            background: var(--highlight-green) !important;
        }
        /* Adjust column widths */
        th:nth-child(1), td:nth-child(1) { min-width: 100px; } /* Created */
        th:nth-child(2), td:nth-child(2) { min-width: 150px; } /* Name */
        th:nth-child(3), td:nth-child(3) { min-width: 60px; } /* Total Key */
        th:nth-child(4), td:nth-child(4) { min-width: 60px; } /* Completed */
        th:nth-child(5), td:nth-child(5) { min-width: 60px; } /* Pending */
        th:nth-child(6), td:nth-child(6) { min-width: 60px; } /* On Hold */
        th:nth-child(7), td:nth-child(7) { min-width: 60px; } /* Rejected */
        th:nth-child(8), td:nth-child(8) { min-width: 60px; } /* Doable Jira */
        th:nth-child(9), td:nth-child(9) { min-width: 60px; } /* Non-Doable Jira */
        th:nth-child(10), td:nth-child(10) { min-width: 120px; } /* Status (Analyst) */
        th:nth-child(11), td:nth-child(11) { min-width: 120px; } /* Status (Mentor) */
        th:nth-child(12), td:nth-child(12) { min-width: 120px; } /* Status (Lead) */
        th:nth-child(13), td:nth-child(13) { min-width: 150px; } /* Lead */
        th:nth-child(14), td:nth-child(14) { min-width: 120px; } /* Version */
        th:nth-child(15), td:nth-child(15) { min-width: 80px; } /* Action */
        .form-select {
            padding: 8px 24px 8px 8px;
            appearance: none;
            background: #f0f4f8 url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="10" height="5" viewBox="0 0 10 5"><path fill="%232c3e50" d="M0 0h10L5 5z"/></svg>') no-repeat right 8px center;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
            flex-shrink: 0;
        }
        .page-item {
            padding: 8px 14px;
            background: var(--bs-gray-100);
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .page-item:hover, .page-item.active {
            background: var(--bs-blue);
            color: white;
        }

        /* Invisible CSRF */
        #csrfToken, .csrf-label {
            color: #ffffff;
        }

        /* Total Count */
        .total-count {
            font-size: 1.1rem;
            color: var(--bs-dark);
            margin-bottom: 10px;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-center mb-4">Engagements Dashboard</h1>

        <div class="d-flex justify-content-between mb-2">
            <button class="btn btn-primary btn-refresh" onclick="fetchEngagements()" data-tooltip="Refresh">ðŸ”„</button>
            <span class="csrf-label">CSRF Token: <strong id="csrfToken">Fetching...</strong></span>
        </div>

        <div class="total-count" id="totalCount">Total Engagements: 0</div>

        <div class="tab-container">
            <div class="tab active" onclick="switchTab('open')">Open SCT</div>
            <div class="tab" onclick="switchTab('closed')">Closed SCT</div>
        </div>

        <div id="open-tab" class="tab-content active">
            <div class="row mb-2">
                <!-- Name Search -->
                <div class="col-md-3">
                    <input type="text" id="nameSearch" class="form-control" placeholder="Search by name..." oninput="fetchEngagements()">
                </div>
                <!-- Lead Filter (Renamed to Select Name) -->
                <div class="col-md-3">
                    <select id="leadFilter" class="form-select" onchange="fetchEngagements()">
                        <option value="">Select Name</option>
                    </select>
                </div>
                <!-- Date Filters -->
                <div class="col-md-2">
                    <input type="date" id="date1" class="form-control" onchange="fetchEngagements()">
                </div>
                <div class="col-md-2">
                    <input type="date" id="date2" class="form-control" onchange="fetchEngagements()">
                </div>
                <!-- Clear Filters Button -->
                <div class="col-md-2 text-end">
                    <button class="btn btn-secondary btn-clear" onclick="clearFilters()" data-tooltip="Clear Filters">â†º</button>
                </div>
            </div>

            <table>
                <thead>
                    <tr>
                        <th rowspan="2">Created</th>
                        <th rowspan="2">Name</th>
                        <th rowspan="2">Total Key</th>
                        <th colspan="4" class="text-center">Analysis Status</th>
                        <th colspan="2" class="text-center">Jira Status</th>
                        <th rowspan="2">Status (Analyst)</th>
                        <th rowspan="2">Status (Mentor)</th>
                        <th rowspan="2">Status (Lead)</th>
                        <th rowspan="2">Lead</th>
                        <th rowspan="2">Version</th>
                        <th rowspan="2">Action</th>
                    </tr>
                    <tr>
                        <th>Completed</th>
                        <th>Pending</th>
                        <th>On Hold</th>
                        <th>Rejected</th>
                        <th>Doable Jira</th>
                        <th>Non-Doable Jira</th>
                    </tr>
                </thead>
                <tbody id="engagementsTable"></tbody>
            </table>

            <div class="pagination" id="pagination"></div>
        </div>

        <div id="closed-tab" class="tab-content">
            <table>
                <thead>
                    <tr>
                        <th rowspan="2">Created</th>
                        <th rowspan="2">Name</th>
                        <th rowspan="2">Total Key</th>
                        <th colspan="4" class="text-center">Analysis Status</th>
                        <th colspan="2" class="text-center">Jira Status</th>
                        <th rowspan="2">Status (Analyst)</th>
                        <th rowspan="2">Status (Mentor)</th>
                        <th rowspan="2">Status (Lead)</th>
                        <th rowspan="2">Lead</th>
                        <th rowspan="2">Version</th>
                    </tr>
                    <tr>
                        <th>Completed</th>
                        <th>Pending</th>
                        <th>On Hold</th>
                        <th>Rejected</th>
                        <th>Doable Jira</th>
                        <th>Non-Doable Jira</th>
                    </tr>
                </thead>
                <tbody id="closedEngagementsTable"></tbody>
            </table>

            <div class="pagination" id="closedPagination"></div>
        </div>

        <div id="alertBox" class="alert"></div>
    </div>

    <script>
        const BASE_URL = "https://demo.defectdojo.org/api/v2";
        let csrfToken = '';
        let usersList = [];
        let debounceTimeout;
        const ROWS_PER_PAGE = 10;
        let currentPageOpen = 1;
        let currentPageClosed = 1;
        let allEngagements = [];
        let openEngagements = [];
        let closedEngagements = [];

        async function fetchCSRF() {
            try {
                const response = await fetch("https://demo.defectdojo.org/api/key-v2", { credentials: "include" });
                const text = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(text, "text/html");
                const csrfInput = doc.querySelector("input[name='csrfmiddlewaretoken']");
                if (csrfInput) {
                    csrfToken = csrfInput.value;
                    document.getElementById("csrfToken").innerText = csrfToken;
                } else {
                    console.error("CSRF token not found.");
                }
            } catch (error) {
                console.error("Error fetching CSRF Token:", error);
            }
        }

        function showAlert(message, type, name = null) {
            const alertBox = document.getElementById("alertBox");
            alertBox.className = `alert alert-${type}`;
            alertBox.innerHTML = type === "success" && name ? `${name} saved` : message;
            alertBox.style.display = "block";
            setTimeout(() => { alertBox.style.display = "none"; }, 3000);
        }

        async function fetchLoggedInUser() {
            try {
                const response = await fetch(`${BASE_URL}/user_profile/`, { credentials: "include" });
                const data = await response.json();
                return data.id;
            } catch (error) {
                console.error("Error fetching logged-in user:", error);
                return null;
            }
        }

        async function fetchUsers() {
            try {
                const loggedInUserId = await fetchLoggedInUser();
                const response = await fetch(`${BASE_URL}/users/`);
                const data = await response.json();
                usersList = data.results || [];

                const leadFilter = document.getElementById("leadFilter");
                if (leadFilter) {
                    leadFilter.innerHTML = `<option value="">Select Name</option>`;
                    usersList.forEach(user => {
                        const option = document.createElement("option");
                        option.value = user.id;
                        option.textContent = `${user.first_name} ${user.last_name}`;
                        leadFilter.appendChild(option);
                    });
                    if (loggedInUserId) leadFilter.value = loggedInUserId;
                }
                fetchEngagements();
            } catch (error) {
                console.error("Error fetching users:", error);
            }
        }

        function clearFilters() {
            document.getElementById("nameSearch").value = "";
            document.getElementById("leadFilter").value = "";
            document.getElementById("date1").value = "";
            document.getElementById("date2").value = "";
            fetchEngagements();
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));
            document.querySelector(`.tab[onclick="switchTab('${tab}')"]`).classList.add('active');
            document.getElementById(`${tab}-tab`).classList.add('active');
            if (tab === 'open') {
                renderTableOpen(currentPageOpen);
            } else {
                renderTableClosed(currentPageClosed);
            }
            updateTotalCount();
        }

        function updateTotalCount() {
            const activeTab = document.querySelector('.tab.active').textContent.trim();
            const count = activeTab === 'Open SCT' ? openEngagements.length : closedEngagements.length;
            document.getElementById("totalCount").textContent = `Total Engagements: ${count}`;
        }

        function renderTableOpen(page) {
            const tableBody = document.getElementById("engagementsTable");
            tableBody.innerHTML = "";
            const start = (page - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedEngagements = openEngagements.slice(start, end);

            requestAnimationFrame(() => {
                paginatedEngagements.forEach((engagement, index) => {
                    const createdDate = engagement.created.split("T")[0];
                    const testCases = engagement.testCases || [];

                    const totalJiras = testCases.length;
                    const completed = testCases.filter(tc => tc.branch_tag === "Completed").length;
                    const pending = testCases.filter(tc => tc.branch_tag === "Pending").length;
                    const onHold = testCases.filter(tc => tc.branch_tag === "On Hold").length;
                    const rejected = testCases.filter(tc => tc.branch_tag === "Rejected").length;
                    const doableJiras = testCases.filter(tc => tc.build_id === "Closed" || tc.build_id === "To Do").length;
                    const nonDoableJiras = totalJiras - doableJiras;

                    const row = document.createElement("tr");
                    row.dataset.id = engagement.id;
                    row.innerHTML = `
                        <td>${createdDate}</td>
                        <td class="${totalJiras === (completed + rejected) ? 'highlight-name' : ''}">${engagement.name}</td>
                        <td>${totalJiras}</td>
                        <td>${completed}</td>
                        <td>${pending}</td>
                        <td>${onHold}</td>
                        <td>${rejected}</td>
                        <td>${doableJiras}</td>
                        <td>${nonDoableJiras}</td>
                        <td>${createDropdown(engagement.status)}</td>
                        <td>${createDropdown(engagement.commit_hash)}</td>
                        <td>${createDropdown(engagement.build_id)}</td>
                        <td>${createLeadDropdown(engagement.lead)}</td>
                        <td><input type="text" class="version-input" value="${engagement.version || ''}" data-id="${engagement.id}"></td>
                        <td><button class="btn btn-primary btn-sm" onclick="updateEngagement(${engagement.id}, '${engagement.name}', '${engagement.target_start}', '${engagement.target_end}', '${engagement.product}', '${engagement.lead}')">Save</button></td>
                    `;
                    tableBody.appendChild(row);
                });
            });

            renderPagination('open');
        }

        function renderTableClosed(page) {
            const tableBody = document.getElementById("closedEngagementsTable");
            tableBody.innerHTML = "";
            const start = (page - 1) * ROWS_PER_PAGE;
            const end = start + ROWS_PER_PAGE;
            const paginatedEngagements = closedEngagements.slice(start, end);

            requestAnimationFrame(() => {
                paginatedEngagements.forEach(engagement => {
                    const createdDate = engagement.created.split("T")[0];
                    const testCases = engagement.testCases || [];

                    const totalJiras = testCases.length;
                    const completed = testCases.filter(tc => tc.branch_tag === "Completed").length;
                    const pending = testCases.filter(tc => tc.branch_tag === "Pending").length;
                    const onHold = testCases.filter(tc => tc.branch_tag === "On Hold").length;
                    const rejected = testCases.filter(tc => tc.branch_tag === "Rejected").length;
                    const doableJiras = testCases.filter(tc => tc.build_id === "Closed" || tc.build_id === "To Do").length;
                    const nonDoableJiras = totalJiras - doableJiras;

                    const row = document.createElement("tr");
                    row.dataset.id = engagement.id;
                    row.innerHTML = `
                        <td>${createdDate}</td>
                        <td class="${totalJiras === (completed + rejected) ? 'highlight-name' : ''}">${engagement.name}</td>
                        <td>${totalJiras}</td>
                        <td>${completed}</td>
                        <td>${pending}</td>
                        <td>${onHold}</td>
                        <td>${rejected}</td>
                        <td>${doableJiras}</td>
                        <td>${nonDoableJiras}</td>
                        <td>${engagement.status}</td>
                        <td>${engagement.commit_hash}</td>
                        <td>${engagement.build_id}</td>
                        <td>${usersList.find(user => user.id == engagement.lead)?.first_name || ''} ${usersList.find(user => user.id == engagement.lead)?.last_name || ''}</td>
                        <td>${engagement.version || ''}</td>
                    `;
                    tableBody.appendChild(row);
                });
            });

            renderPagination('closed');
        }

        function renderPagination(tab) {
            const totalPages = Math.ceil((tab === 'open' ? openEngagements : closedEngagements).length / ROWS_PER_PAGE);
            const pagination = document.getElementById(tab === 'open' ? 'pagination' : 'closedPagination');
            pagination.innerHTML = "";

            // First
            const firstItem = document.createElement("div");
            firstItem.className = `page-item ${(tab === 'open' ? currentPageOpen : currentPageClosed) === 1 ? 'active' : ''}`;
            firstItem.textContent = "First";
            firstItem.onclick = () => {
                if ((tab === 'open' ? currentPageOpen : currentPageClosed) !== 1) {
                    if (tab === 'open') currentPageOpen = 1; else currentPageClosed = 1;
                    tab === 'open' ? renderTableOpen(currentPageOpen) : renderTableClosed(currentPageClosed);
                    updatePaginationHighlight(tab);
                }
            };
            pagination.appendChild(firstItem);

            // Previous
            const prevItem = document.createElement("div");
            prevItem.className = `page-item`;
            prevItem.textContent = "Previous";
            prevItem.onclick = () => {
                if ((tab === 'open' ? currentPageOpen : currentPageClosed) > 1) {
                    if (tab === 'open') currentPageOpen--; else currentPageClosed--;
                    tab === 'open' ? renderTableOpen(currentPageOpen) : renderTableClosed(currentPageClosed);
                    updatePaginationHighlight(tab);
                }
            };
            pagination.appendChild(prevItem);

            // Next
            const nextItem = document.createElement("div");
            nextItem.className = `page-item`;
            nextItem.textContent = "Next";
            nextItem.onclick = () => {
                if ((tab === 'open' ? currentPageOpen : currentPageClosed) < totalPages) {
                    if (tab === 'open') currentPageOpen++; else currentPageClosed++;
                    tab === 'open' ? renderTableOpen(currentPageOpen) : renderTableClosed(currentPageClosed);
                    updatePaginationHighlight(tab);
                }
            };
            pagination.appendChild(nextItem);

            // Last
            const lastItem = document.createElement("div");
            lastItem.className = `page-item ${(tab === 'open' ? currentPageOpen : currentPageClosed) === totalPages ? 'active' : ''}`;
            lastItem.textContent = "Last";
            lastItem.onclick = () => {
                if ((tab === 'open' ? currentPageOpen : currentPageClosed) !== totalPages) {
                    if (tab === 'open') currentPageOpen = totalPages; else currentPageClosed = totalPages;
                    tab === 'open' ? renderTableOpen(currentPageOpen) : renderTableClosed(currentPageClosed);
                    updatePaginationHighlight(tab);
                }
            };
            pagination.appendChild(lastItem);
        }

        function updatePaginationHighlight(tab) {
            const totalPages = Math.ceil((tab === 'open' ? openEngagements : closedEngagements).length / ROWS_PER_PAGE);
            document.querySelectorAll(`#${tab === 'open' ? 'pagination' : 'closedPagination'} .page-item`).forEach(item => {
                item.classList.remove('active');
                if (item.textContent === "First" && (tab === 'open' ? currentPageOpen : currentPageClosed) === 1) item.classList.add('active');
                if (item.textContent === "Last" && (tab === 'open' ? currentPageOpen : currentPageClosed) === totalPages) item.classList.add('active');
            });
        }

        async function fetchEngagements() {
            try {
                if (debounceTimeout) clearTimeout(debounceTimeout);

                debounceTimeout = setTimeout(async () => {
                    const response = await fetch(`${BASE_URL}/engagements/?tags=crm&o=-created`);
                    const data = await response.json();
                    if (!data.results) return;

                    const date1 = document.getElementById("date1").value;
                    const date2 = document.getElementById("date2").value;
                    const selectedLead = document.getElementById("leadFilter").value;
                    const nameSearch = document.getElementById("nameSearch").value.toLowerCase().trim();

                    allEngagements = data.results.filter(engagement => {
                        const createdDate = engagement.created ? engagement.created.split("T")[0] : "";
                        const engagementName = engagement.name.toLowerCase();

                        if (!createdDate || new Date(createdDate) <= new Date("2025-02-28")) return false;
                        return true;
                    });

                    const testCasesResults = await Promise.all(
                        allEngagements.map(engagement => fetchTestCases(engagement.id))
                    );

                    allEngagements = allEngagements.map((engagement, index) => ({
                        ...engagement,
                        testCases: testCasesResults[index]
                    }));

                    openEngagements = allEngagements.filter(engagement => 
                        !(engagement.status === "Completed" && 
                          engagement.commit_hash === "Completed" && 
                          engagement.build_id === "Completed")
                    ).filter(engagement => {
                        const createdDate = engagement.created.split("T")[0];
                        const engagementName = engagement.name.toLowerCase();
                        if (date1 && createdDate < date1) return false;
                        if (date2 && createdDate > date2) return false;
                        if (selectedLead && engagement.lead != selectedLead) return false;
                        if (nameSearch && !engagementName.includes(nameSearch)) return false;
                        return true;
                    });

                    closedEngagements = allEngagements.filter(engagement => 
                        engagement.status === "Completed" && 
                        engagement.commit_hash === "Completed" && 
                        engagement.build_id === "Completed"
                    );

                    currentPageOpen = 1;
                    currentPageClosed = 1;
                    renderTableOpen(currentPageOpen);
                    renderTableClosed(currentPageClosed);
                    updateTotalCount();
                }, 500);
            } catch (error) {
                console.error("Error fetching engagements:", error);
                showAlert("Error fetching engagements!", "danger");
            }
        }

        async function fetchTestCases(engagementId) {
            try {
                const response = await fetch(`${BASE_URL}/tests/?engagement=${engagementId}&tags=crm_jira`);
                const data = await response.json();
                return data.results || [];
            } catch (error) {
                console.error("Error fetching test cases:", error);
                return [];
            }
        }

        function createDropdown(selectedValue) {
            const options = ["Not Started", "On Hold", "Completed"];
            let dropdown = `<select class="form-select status-dropdown">`;
            options.forEach(option => {
                dropdown += `<option value="${option}" ${option === selectedValue ? "selected" : ""}>${option}</option>`;
            });
            dropdown += `</select>`;
            return dropdown;
        }

        function createLeadDropdown(selectedLeadId) {
            let dropdown = `<select class="form-select lead-dropdown">`;
            usersList.forEach(user => {
                dropdown += `<option value="${user.id}" ${user.id == selectedLeadId ? "selected" : ""}>${user.first_name} ${user.last_name}</option>`;
            });
            dropdown += `</select>`;
            return dropdown;
        }

        async function updateEngagement(engagementId, name, targetStart, targetEnd, product, lead) {
            try {
                const row = document.querySelector(`.version-input[data-id="${engagementId}"]`).closest("tr");
                const status = row.querySelector("td:nth-child(10) select").value;
                const commitHash = row.querySelector("td:nth-child(11) select").value;
                const buildId = row.querySelector("td:nth-child(12) select").value;
                const version = row.querySelector(".version-input").value;
                const updatedLead = row.querySelector(".lead-dropdown").value;

                const payload = {
                    id: engagementId,
                    name,
                    target_start: targetStart,
                    target_end: targetEnd,
                    product,
                    lead: updatedLead,
                    status,
                    commit_hash: commitHash,
                    build_id: buildId,
                    version
                };

                const response = await fetch(`${BASE_URL}/engagements/${engagementId}/`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json", "X-CSRFToken": csrfToken },
                    body: JSON.stringify(payload),
                    credentials: "include"
                });

                showAlert(response.ok ? `${name} saved` : "Failed to update!", response.ok ? "success" : "danger", name);
                fetchEngagements(); // Refresh data after update
            } catch (error) {
                showAlert("Error updating engagement!", "danger");
                console.error("Error:", error);
            }
        }

        document.addEventListener("DOMContentLoaded", async () => {
            await fetchCSRF();
            await fetchUsers();
            await fetchEngagements();
        });
    </script>
</body>
</html>