// Global CSRF token cache
let cachedCsrfToken = null;

// Fetch CSRF token from DefectDojo
async function fetchCsrfToken() {
    if (cachedCsrfToken) return cachedCsrfToken;

    try {
        const response = await fetch('https://demo.defectdojo.org/api/key-v2', {
            method: "GET",
            credentials: "include"
        });
        if (!response.ok) throw new Error("Failed to fetch CSRF token page");

        const htmlText = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlText, 'text/html');
        const csrfInput = doc.querySelector('input[name="csrfmiddlewaretoken"]');
        if (!csrfInput) throw new Error("CSRF token not found in HTML");

        cachedCsrfToken = csrfInput.value;
        return cachedCsrfToken;
    } catch (error) {
        console.error("[SuperGrok] Error fetching CSRF token:", error);
        throw error;
    }
}

async function generateReport() {
    const engagementId = document.getElementById("reportEngagementSelect").value;
    if (!engagementId) {
        document.getElementById("reportContent").innerHTML = '<p style="color: #721c24;">Please select an engagement to generate the report.</p>';
        return;
    }

    // Fetch latest engagement data with GET
    let engagement;
    try {
        const response = await fetch(`${BASE_URL}/engagements/${engagementId}/`, {
            method: "GET",
            headers: { "Content-Type": "application/json" },
            credentials: "include"
        });
        if (!response.ok) throw new Error("Failed to fetch engagement data");
        engagement = await response.json();
    } catch (error) {
        console.error("[SuperGrok] Error fetching engagement:", error);
        document.getElementById("reportContent").innerHTML = '<p style="color: #721c24;">Error fetching engagement data!</p>';
        return;
    }

    // Fetch test cases
    if (!engagement.testCases || engagement.testCases.length === 0) {
        const response = await fetch(`${BASE_URL}/tests/?engagement=${engagement.id}`);
        const data = await response.json();
        engagement.testCases = data.results || [];
    }

    const testCases = engagement.testCases;
    const today = new Date().toISOString().split('T')[0];
    const functionalJiras = testCases.filter(tc => tc.commit_hash !== "Security").length;
    const securityJiras = testCases.filter(tc => tc.commit_hash === "Security").length;

    // Section 1: Summary
    let summaryContent = `
        <h3 style="color: var(--bs-blue); margin-top: 20px;">Summary</h3>
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px; border: 2px solid #007bff;">
            <thead>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Build</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Date</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;" colspan="2">Total Changelog</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Contrast Verification</th>
                </tr>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Functional Jira</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Security Jira</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
                </tr>
            </thead>
            <tbody>
                <tr style="background: #fafafa;">
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${engagement.name}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${today}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${functionalJiras}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${securityJiras}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">
                        <select class="form-select contrast-verification-dropdown" id="contrast-verification-${engagement.id}">
                            <option value="No" ${!engagement.reason || engagement.reason === "No" ? 'selected' : ''}>No</option>
                            <option value="Yes" ${engagement.reason === "Yes" ? 'selected' : ''}>Yes</option>
                        </select>
                        <button class="btn btn-primary mt-2" onclick="updateEngagement(${engagement.id}, '${engagement.name}', '${engagement.target_start}', '${engagement.target_end}', ${engagement.product}, ${engagement.lead}, document.getElementById('contrast-verification-${engagement.id}').value, '${engagement.description || ''}')">Save</button>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%; border-collapse: collapse; margin-top: 20px; border: 2px solid #007bff;">
            <thead>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr style="background: #fafafa;">
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">
                        <textarea class="form-control engagement-description-textarea" id="description-${engagement.id}" style="width: 100%; height: 200px; max-width: 10cm; text-align: justify; word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">${engagement.description || ''}</textarea>
                        <button class="btn btn-primary mt-2 save-description-btn" onclick="updateEngagement(${engagement.id}, '${engagement.name}', '${engagement.target_start}', '${engagement.target_end}', ${engagement.product}, ${engagement.lead}, '${engagement.reason || 'No'}', document.getElementById('description-${engagement.id}').value)">Save</button>
                    </td>
                </tr>
            </tbody>
        </table>
    `;

    // Section 2: Build
    let buildOverviewContent = `
        <h3 style="color: var(--bs-blue); margin-top: 20px;">Build</h3>
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px; border: 2px solid #007bff;">
            <thead>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Build</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Date</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Total No. of Jiras</th>
                </tr>
            </thead>
            <tbody>
                <tr style="background: #fafafa;">
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${engagement.name}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${today}</td>
                    <td style="padding: 8px; border: 1px solid #e0e0e0;">${testCases.length}</td>
                </tr>
            </tbody>
        </table>
    `;

    let buildDetailsContent = `
        <table style="width: 100%; border-collapse: collapse; margin-top: 20px; border: 2px solid #007bff;">
            <thead>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Changelog Reviewers</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Issue Key</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Test Approach</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Manual Secure Code Review</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Manual Security Testing</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Remark/Comment</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Why Manual Testing is Not Required?</th>
                </tr>
            </thead>
            <tbody>
    `;
    testCases.forEach(tc => {
        const lead = usersList.find(user => user.id == tc.lead);
        const reviewer = lead ? `${lead.first_name} ${lead.last_name}` : 'Unassigned';
        const testApproach = tc.issue_type && tc.issue_type.toLowerCase().includes("security") ? "Security Jira" : "Functional Jira";
        const descriptionLower = tc.description ? tc.description.toLowerCase() : "";
        const secureCodeReview = descriptionLower.includes("secure code review: done") ? "Done" : 
                                 (descriptionLower.includes("secure code review: na") ? "NA" : "Not Done");
        const manualSecurityTesting = descriptionLower.includes("manual security code testing: done") ? "Done" : 
                                      (descriptionLower.includes("manual security code testing: na") ? "NA" : "Not Done");

        buildDetailsContent += `
            <tr style="background: #fafafa;" data-id="${tc.id}">
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${reviewer}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${tc.id}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${testApproach}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${secureCodeReview}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${manualSecurityTesting}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0; max-width: 5cm; word-wrap: break-word; overflow-wrap: break-word; white-space: normal; text-align: justify;">${tc.description || 'N/A'}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">
                    <input type="text" class="form-control manual-testing-reason" data-id="${tc.id}" value="${tc.build_id || ''}" />
                </td>
            </tr>
        `;
    });
    buildDetailsContent += `</tbody></table>`;
    const buildContent = buildOverviewContent + buildDetailsContent;

    // Section 3: Security Analysis
    const securityResponse = await fetch(`${BASE_URL}/tests/?engagement=${engagementId}&tags=risk_register`);
    const securityData = await securityResponse.json();
    const securityTests = securityData.results || [];

    let securityAnalysisContent = `
        <h3 style="color: var(--bs-blue); margin-top: 20px;">Security Analysis</h3>
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px; border: 2px solid #007bff;">
            <thead>
                <tr style="background: var(--bs-gray-200);">
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Sr. No.</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Category</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Status</th>
                    <th style="padding: 8px; border: 1px solid #e0e0e0;">Comment</th>
                </tr>
            </thead>
            <tbody id="securityAnalysisTableBody">
    `;
    securityTests.forEach((test, index) => {
        const statusOptions = ["NA", "Found by code review", "Found by Manual Testing", "Not found"];
        const selectedStatus = test.commit_hash || "NA";
        securityAnalysisContent += `
            <tr style="background: #fafafa;" data-id="${tc.id}">
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${index + 1}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${test.title || 'N/A'}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">
                    <select class="form-select security-status-dropdown" data-id="${test.id}">
                        ${statusOptions.map(option => `<option value="${option}" ${option === selectedStatus ? 'selected' : ''}>${option}</option>`).join('')}
                    </select>
                </td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">
                    <input type="text" class="form-control security-comment-input" data-id="${test.id}" value="${test.branch_tag || ''}" />
                </td>
            </tr>
        `;
    });
    securityAnalysisContent += `</tbody></table>`;

    // Combine sections with Print button
    const reportContent = `
        <div class="report-container" style="padding: 20px; background: #fff; border: 3px solid #007bff; border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">
            ${summaryContent}${buildContent}${securityAnalysisContent}
            <button class="btn btn-success mt-3 print-report-btn" onclick="printReport()">Print Report</button>
        </div>
        <style>
            @media print {
                .report-container { width: 100%; margin: 0; padding: 10mm; border: 2px solid #007bff; box-shadow: none; }
                table { page-break-inside: auto; width: 100%; }
                tr { page-break-inside: avoid; page-break-after: auto; }
                th, td { font-size: 12pt; }
                .btn, .form-select, .form-control { display: none; }
                h3 { color: #007bff; font-size: 16pt; }
                @page { margin: 10mm; }
            }
        </style>
    `;
    document.getElementById("reportContent").innerHTML = reportContent;

    // Event listeners for Section 2
    document.querySelectorAll('.manual-testing-reason').forEach(input => {
        input.addEventListener('blur', async () => {
            const testId = input.dataset.id;
            const newReason = input.value;
            await updateSecurityTest(testId, { build_id: newReason }, engagement.name);
            showAlert("Manual Testing Reason Saved", "success", engagement.name);
        });
    });

    // Event listeners for Section 3
    document.querySelectorAll('.security-status-dropdown').forEach(dropdown => {
        dropdown.addEventListener('change', async () => {
            const testId = dropdown.dataset.id;
            const newStatus = dropdown.value;
            await updateSecurityTest(testId, { commit_hash: newStatus }, engagement.name);
            showAlert("Status Saved", "success", engagement.name);
        });
    });

    document.querySelectorAll('.security-comment-input').forEach(input => {
        input.addEventListener('blur', async () => {
            const testId = input.dataset.id;
            const newComment = input.value;
            await updateSecurityTest(testId, { branch_tag: newComment }, engagement.name);
            showAlert("Comment Saved", "success", engagement.name);
        });
    });
}

// SuperGrok Edition: PUT request mirroring SCT.html logic
async function updateEngagement(id, name, target_start, target_end, product, lead, reason, description) {
    try {
        const csrfToken = await fetchCsrfToken();
        if (!csrfToken) throw new Error("[SuperGrok] CSRF token not retrieved");

        const payload = {
            id: id,
            name: name || "Unnamed Engagement",
            target_start: target_start || "1970-01-01",
            target_end: target_end || "1970-01-01",
            product: product || null,
            lead: lead || null,
            reason: reason || "No",
            description: description || ""
        };

        const response = await fetch(`${BASE_URL}/engagements/${id}/`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken
            },
            body: JSON.stringify(payload),
            credentials: "include"
        });

        if (response.ok) {
            console.log(`[SuperGrok] Updated engagement ${id} with ${JSON.stringify(payload)}`);
            const engagement = openEngagements.find(eng => eng.id == id);
            if (engagement) {
                engagement.reason = reason;
                engagement.description = description;
            }
            showAlert("Engagement Updated", "success", name);
        } else {
            const errorText = await response.text();
            console.error(`[SuperGrok] Failed to update engagement ${id}: ${errorText}`);
            showAlert(`Failed to update engagement: ${response.statusText}`, "danger");
        }
    } catch (error) {
        console.error("[SuperGrok] Error updating engagement:", error);
        showAlert("Error updating engagement: " + error.message, "danger");
    }
}

// Function to update security test via PATCH
async function updateSecurityTest(testId, payload, engagementName) {
    try {
        const csrfToken = await fetchCsrfToken();
        if (!csrfToken) throw new Error("[SuperGrok] CSRF token not retrieved");

        const response = await fetch(`${BASE_URL}/tests/${testId}/`, {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken
            },
            body: JSON.stringify(payload),
            credentials: "include"
        });

        if (response.ok) {
            console.log(`[SuperGrok] Updated test ${testId} with ${JSON.stringify(payload)}`);
            showAlert("Test Updated", "success", engagementName);
        } else {
            const errorText = await response.text();
            console.error(`[SuperGrok] Failed to update test ${testId}: ${errorText}`);
            showAlert(`Failed to update test: ${response.statusText}`, "danger");
        }
    } catch (error) {
        console.error("[SuperGrok] Error updating test:", error);
        showAlert("Error updating test: " + error.message, "danger");
    }
}

// Function to print the report
function printReport() {
    window.print();
}