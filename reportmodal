function printReport() {
    // Store original content to restore later
    const reportContent = document.getElementById("reportContent");
    if (!reportContent) {
        console.error("[SuperGrok] Error: reportContent element not found");
        alert("Unable to print report: Content container missing.");
        return;
    }
    const originalContent = reportContent.innerHTML;

    // Get the report container
    const reportContainer = reportContent.querySelector('.report-container');
    if (!reportContainer) {
        console.error("[SuperGrok] Error: .report-container not found in reportContent");
        alert("Unable to print report: Report container missing.");
        return;
    }

    // Debug: Log the containerâ€™s innerHTML to inspect structure
    console.log("[SuperGrok] Report container content:", reportContainer.innerHTML);

    // Safely extract sections with null checks
    const summaryHeader = reportContainer.querySelector('h3:first-child');
    const summaryTable1 = reportContainer.querySelector('table:first-child');
    const summaryTable2 = reportContainer.querySelector('table:nth-child(2)');
    const buildHeader = reportContainer.querySelector('h3:nth-child(2)');
    const buildTable1 = reportContainer.querySelector('table:nth-child(3)');
    const buildTable2 = reportContainer.querySelector('table:nth-child(4)');
    const securityHeader = reportContainer.querySelector('h3:last-child');
    const securityTable = reportContainer.querySelector('table:last-child');

    // Check if all required elements exist
    if (!summaryHeader || !summaryTable1 || !summaryTable2 || !buildHeader || !buildTable1 || !buildTable2 || !securityHeader || !securityTable) {
        console.error("[SuperGrok] Error: One or more sections missing in report structure", {
            summaryHeader: !!summaryHeader,
            summaryTable1: !!summaryTable1,
            summaryTable2: !!summaryTable2,
            buildHeader: !!buildHeader,
            buildTable1: !!buildTable1,
            buildTable2: !!buildTable2,
            securityHeader: !!securityHeader,
            securityTable: !!securityTable
        });
        alert("Unable to print report: Incomplete report structure. Please ensure all sections are generated.");
        return;
    }

    // Construct sections with outerHTML
    const summarySection = summaryHeader.outerHTML + summaryTable1.outerHTML + summaryTable2.outerHTML;
    const buildSection = buildHeader.outerHTML + buildTable1.outerHTML + buildTable2.outerHTML;
    const securitySection = securityHeader.outerHTML + securityTable.outerHTML;

    // Create print-specific HTML with page breaks and styling
    const printHtml = `
        <div class="print-report-container">
            <!-- Page 1: Summary -->
            <div class="print-page summary-page" style="page-break-after: always;">
                <h1 style="text-align: center; color: #007bff; font-size: 24pt; margin-bottom: 20px;">Engagement Summary Report</h1>
                ${summarySection}
            </div>

            <!-- Page 2: Security Analysis -->
            <div class="print-page security-page" style="page-break-before: always; page-break-after: always;">
                ${securitySection}
            </div>

            <!-- Page 3+: Build -->
            <div class="print-page build-page" style="page-break-before: always;">
                ${buildSection}
            </div>

            <style>
                @media print {
                    .print-report-container {
                        width: 100%;
                        margin: 0;
                        padding: 0;
                    }
                    .print-page {
                        width: 100%;
                        padding: 10mm;
                        box-sizing: border-box;
                    }
                    .summary-page table {
                        width: 100%;
                        border: 2px solid #007bff;
                        border-collapse: collapse;
                        margin-top: 10px;
                        background: #fafafa;
                        font-size: 12pt;
                    }
                    .summary-page th, .summary-page td {
                        padding: 8px;
                        border: 1px solid #e0e0e0;
                        text-align: left;
                    }
                    .summary-page h3 {
                        color: #007bff;
                        font-size: 16pt;
                        margin-top: 0;
                    }
                    .security-page table, .build-page table {
                        width: 100%;
                        border: 2px solid #007bff;
                        border-collapse: collapse;
                        margin-top: 10px;
                        background: #fafafa;
                        font-size: 12pt;
                        page-break-inside: auto;
                    }
                    .security-page th, .security-page td, .build-page th, .build-page td {
                        padding: 8px;
                        border: 1px solid #e0e0e0;
                        text-align: left;
                        page-break-inside: avoid;
                    }
                    .security-page tr, .build-page tr {
                        page-break-inside: avoid;
                        page-break-after: auto;
                    }
                    .security-page h3, .build-page h3 {
                        color: #007bff;
                        font-size: 16pt;
                        margin-top: 0;
                        page-break-before: avoid;
                    }
                    .btn, .form-select, .form-control {
                        display: none; /* Hide buttons, dropdowns, and inputs */
                    }
                    @page {
                        margin: 10mm; /* Consistent margins for all pages */
                    }
                }
            </style>
        </div>
    `;

    // Temporarily replace report content with print layout
    reportContent.innerHTML = printHtml;

    // Trigger print
    window.print();

    // Restore original content after printing
    setTimeout(() => {
        reportContent.innerHTML = originalContent;
    }, 100); // Delay to ensure print dialog opens first
}