function printReport() {
    // Get the report container
    const reportContent = document.getElementById("reportContent");
    if (!reportContent) {
        console.error("[SuperGrok] Error: reportContent element not found");
        alert("Unable to generate report: Content container missing.");
        return;
    }

    const reportContainer = reportContent.querySelector('.report-container');
    if (!reportContainer) {
        console.error("[SuperGrok] Error: .report-container not found in reportContent");
        alert("Unable to generate report: Report container missing.");
        return;
    }

    // Debug: Log the containerâ€™s structure
    console.log("[SuperGrok] Report container content:", reportContainer.innerHTML);

    // Fetch all h3 and table elements
    const headers = reportContainer.querySelectorAll('h3');
    const tables = reportContainer.querySelectorAll('table');

    // Validate structure: Expecting 3 headers and 5 tables
    if (headers.length < 3 || tables.length < 5) {
        console.error("[SuperGrok] Error: Incomplete report structure", {
            headersFound: headers.length,
            tablesFound: tables.length,
            expected: "3 headers, 5 tables"
        });
        alert("Unable to generate report: Incomplete structure. Expected 3 sections with 5 tables.");
        return;
    }

    // Extract and modify sections with current values
    // Summary Section
    const summaryHeader = headers[0].outerHTML;
    let summaryTable1 = tables[0].outerHTML;
    let summaryTable2 = tables[1].outerHTML;

    // Get current commit_hash (Contrast Verification) from dropdown
    const contrastDropdown = reportContainer.querySelector('.contrast-verification-dropdown');
    const currentCommitHash = contrastDropdown ? contrastDropdown.value : 'No'; // Default to 'No'
    console.log("[SuperGrok] Contrast Verification (commit_hash):", currentCommitHash);
    summaryTable1 = summaryTable1.replace(
        /<select[^>]*class="[^"]*contrast-verification-dropdown[^"]*"[^>]*>[\s\S]*?<\/select>/i,
        `<span>${currentCommitHash}</span>`
    );

    // Get current description from textarea
    const descriptionTextarea = reportContainer.querySelector('.engagement-description-textarea');
    const currentDescription = descriptionTextarea ? descriptionTextarea.value : ''; // Default to empty
    console.log("[SuperGrok] Description:", currentDescription);
    summaryTable2 = summaryTable2.replace(
        /<textarea[^>]*class="[^"]*engagement-description-textarea[^"]*"[^>]*>[\s\S]*?<\/textarea>\s*<button[^>]*>[\s\S]*?<\/button>/i,
        `<div style="text-align: justify; word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">${currentDescription || 'N/A'}</div>`
    );

    const summarySection = `${summaryHeader}${summaryTable1}${summaryTable2}`;

    // Build Section
    const buildHeader = headers[1].outerHTML;
    let buildTable1 = tables[2].outerHTML;
    let buildTable2 = tables[3].outerHTML;

    // Replace manual-testing-reason inputs with current values
    const manualInputs = reportContainer.querySelectorAll('.manual-testing-reason');
    manualInputs.forEach((input) => {
        const currentValue = input.value || 'N/A';
        buildTable2 = buildTable2.replace(
            new RegExp(`<input[^>]*class="[^"]*manual-testing-reason[^"]*"[^>]*data-id="${input.dataset.id}"[^>]*value="[^"]*"[^>]*>`, 'i'),
            `<span>${currentValue}</span>`
        );
    });

    const buildSection = `${buildHeader}${buildTable1}${buildTable2}`;

    // Security Analysis Section
    const securityHeader = headers[2].outerHTML;
    let securityTable = tables[4].outerHTML;

    // Replace Status (commit_hash) dropdowns with current values
    const statusDropdowns = reportContainer.querySelectorAll('.security-status-dropdown');
    statusDropdowns.forEach((dropdown) => {
        const currentStatus = dropdown.value || 'NA';
        console.log("[SuperGrok] Security Analysis Status (commit_hash) for data-id=" + dropdown.dataset.id + ":", currentStatus);
        securityTable = securityTable.replace(
            new RegExp(`<select[^>]*class="[^"]*security-status-dropdown[^"]*"[^>]*data-id="${dropdown.dataset.id}"[^>]*>[\s\S]*?</select>`, 'i'),
            `<span>${currentStatus}</span>`
        );
    });

    // Replace Comment inputs with current values
    const commentInputs = reportContainer.querySelectorAll('.security-comment-input');
    commentInputs.forEach((input) => {
        const currentComment = input.value || '';
        console.log("[SuperGrok] Security Analysis Comment (branch_tag) for data-id=" + input.dataset.id + ":", currentComment);
        securityTable = securityTable.replace(
            new RegExp(`<input[^>]*class="[^"]*security-comment-input[^"]*"[^>]*data-id="${input.dataset.id}"[^>]*value="[^"]*"[^>]*>`, 'i'),
            `<span>${currentComment || 'N/A'}</span>`
        );
    });

    const securitySection = `${securityHeader}${securityTable}`;

    // Debug: Log modified sections
    console.log("[SuperGrok] Modified Summary Section:", summarySection);
    console.log("[SuperGrok] Modified Security Section:", securitySection);

    // Create full HTML document with styling
    const reportHtml = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Engagement Report</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 0;
                    padding: 0;
                    width: 100%;
                }
                .report-container {
                    width: 100%;
                    padding: 20mm;
                    box-sizing: border-box;
                }
                h1 {
                    text-align: center;
                    color: #007bff;
                    font-size: 24pt;
                    margin-bottom: 20px;
                }
                h3 {
                    color: #007bff;
                    font-size: 16pt;
                    margin-top: 20px;
                }
                table {
                    width: 100%;
                    border: 2px solid #007bff;
                    border-collapse: collapse;
                    margin-top: 10px;
                    background: #fafafa;
                    font-size: 12pt;
                }
                th, td {
                    padding: 8px;
                    border: 1px solid #e0e0e0;
                    text-align: left;
                }
                .btn, .form-select, .form-control {
                    display: none; /* Hide buttons, dropdowns, and inputs */
                }
                @media print {
                    .report-container {
                        padding: 10mm;
                    }
                    .summary-section {
                        page-break-after: always;
                    }
                    .security-section {
                        page-break-before: always;
                        page-break-after: always;
                    }
                    .build-section {
                        page-break-before: always;
                    }
                    table {
                        page-break-inside: auto;
                    }
                    tr {
                        page-break-inside: avoid;
                        page-break-after: auto;
                    }
                    h3 {
                        page-break-before: avoid;
                    }
                    @page {
                        margin: 10mm;
                    }
                }
            </style>
        </head>
        <body>
            <div class="report-container">
                <!-- Summary Section -->
                <div class="summary-section">
                    <h1>Engagement Summary Report</h1>
                    ${summarySection}
                </div>

                <!-- Security Analysis Section -->
                <div class="security-section">
                    ${securitySection}
                </div>

                <!-- Build Section -->
                <div class="build-section">
                    ${buildSection}
                </div>
            </div>
        </body>
        </html>
    `;

    // Open the report in a new tab
    const newTab = window.open('', '_blank');
    if (!newTab) {
        console.error("[SuperGrok] Error: Failed to open new tab (popup blocked?)");
        alert("Unable to open report: Please allow popups for this site.");
        return;
    }

    newTab.document.write(reportHtml);
    newTab.document.close();

    // Optional: Focus the new tab
    newTab.focus();
}