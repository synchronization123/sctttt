// Section 1: Summary
let summaryContent = `
    <h3 style="color: var(--bs-blue); margin-top: 20px;">Summary</h3>
    
    <!-- Table 1: Build, Date, Total Changelog, Contrast Verification -->
    <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
        <thead>
            <tr style="background: var(--bs-gray-200);">
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Build</th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Date</th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;" colspan="2">Total Changelog</th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Contrast Verification</th>
            </tr>
            <tr style="background: var(--bs-gray-200);">
                <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Functional Jira</th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Security Jira</th>
                <th style="padding: 8px; border: 1px solid #e0e0e0;"></th>
            </tr>
        </thead>
        <tbody>
            <tr style="background: #fafafa;">
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${engagement.name}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${today}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${functionalJiras}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">${securityJiras}</td>
                <td style="padding: 8px; border: 1px solid #e0e0e0;">
                    <select class="form-select contrast-verification-dropdown" data-id="${engagement.id}">
                        <option value="No" ${!engagement.reason || engagement.reason === "No" ? 'selected' : ''}>No</option>
                        <option value="Yes" ${engagement.reason === "Yes" ? 'selected' : ''}>Yes</option>
                    </select>
                </td>
            </tr>
        </tbody>
    </table>

    <!-- Table 2: Engagement Description -->
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
            <tr style="background: var(--bs-gray-200);">
                <th style="padding: 8px; border: 1px solid #e0e0e0;">Description</th>
            </tr>
        </thead>
        <tbody>
            <tr style="background: #fafafa;">
                <td style="padding: 8px; border: 1px solid #e0e0e0;">
                    <textarea class="form-control engagement-description-textarea" data-id="${engagement.id}" style="width: 100%; height: 200px; max-width: 10cm; text-align: justify; word-wrap: break-word; overflow-wrap: break-word; white-space: normal;">${engagement.description || ''}</textarea>
                    <button class="btn btn-primary mt-2 save-description-btn" data-id="${engagement.id}">Save</button>
                </td>
            </tr>
        </tbody>
    </table>
`;

// Combine with other sections (assuming buildContent and securityAnalysisContent are defined elsewhere)
const reportContent = `${summaryContent}${buildContent}${securityAnalysisContent}`;
document.getElementById("reportContent").innerHTML = reportContent;

// Add event listeners after DOM update
const contrastDropdown = document.querySelector('.contrast-verification-dropdown');
if (contrastDropdown) {
    contrastDropdown.addEventListener('change', async () => {
        const engagementId = contrastDropdown.dataset.id;
        const newValue = contrastDropdown.value;
        await updateEngagement(engagementId, { reason: newValue }, engagement.name);
        showAlert("Contrast Verification Saved", "success", engagement.name);
    });
}

const saveButton = document.querySelector('.save-description-btn');
const textarea = document.querySelector('.engagement-description-textarea');
if (saveButton && textarea) {
    saveButton.addEventListener('click', async () => {
        const engagementId = saveButton.dataset.id;
        const newDescription = textarea.value;
        await updateEngagement(engagementId, { description: newDescription }, engagement.name);
        showAlert("Description Saved", "success", engagement.name);
    });
}

// Function to update engagement via API
async function updateEngagement(engagementId, payload, engagementName) {
    try {
        const response = await fetch(`${BASE_URL}/engagements/${engagementId}/`, {
            method: "PATCH",
            headers: { 
                "Content-Type": "application/json",
                "X-CSRFToken": window.csrfToken || document.querySelector('[name=csrfmiddlewaretoken]').value // Ensure CSRF token is available
            },
            body: JSON.stringify(payload),
            credentials: "include"
        });

        if (response.ok) {
            console.log(`Updated engagement ${engagementId} with ${JSON.stringify(payload)}`);
            const engagement = openEngagements.find(eng => eng.id == engagementId);
            Object.assign(engagement, payload); // Update local data
        } else {
            const errorText = await response.text();
            console.error(`Failed to update engagement ${engagementId}: ${errorText}`);
            showAlert(`Failed to update engagement: ${response.statusText}`, "danger");
        }
    } catch (error) {
        console.error("Error updating engagement:", error);
        showAlert("Error updating engagement: " + error.message, "danger");
    }
}