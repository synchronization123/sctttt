def fetch_jira_issues(version):
    """Fetch all JIRA issues where 'Build(s)' matches either 'VX.Y.Z' or 'RX.Y.Z' (case-insensitive)."""
    normalized_version = normalize_version(version)  # Starts with 'v'
    alt_version = re.sub(r"^v", "r", normalized_version, flags=re.IGNORECASE)  # Replace 'v' with 'r'

    jql_query = f'"Build(s)"="{normalized_version}" OR "Build(s)"="{alt_version}"'
    start_at = 0
    max_results = 50  # Set to 50 per page as requested
    all_issues = []

    while True:
        params = {
            "jql": jql_query,
            "fields": "key,status,issuetype,labels",
            "maxResults": max_results,
            "startAt": start_at
        }
        try:
            response = requests.get(JIRA_URL, headers=JIRA_HEADERS, params=params)
            response.raise_for_status()
            data = response.json()
            
            issues = data.get("issues", [])
            all_issues.extend(issues)
            
            total = data.get("total", 0)  # Total number of issues matching the query
            print(f"Fetched {len(all_issues)} of {total} issues so far...")

            # Break only if we've fetched all issues or no more issues are returned
            if len(issues) == 0 or len(all_issues) >= total:
                break
            
            start_at += max_results

        except requests.RequestException as e:
            print(f"Error fetching JIRA issues at startAt={start_at}: {e}")
            break

    print(f"Total JIRA issues fetched: {len(all_issues)}")
    return all_issues